version: '3.8'

services:
  # Notification Service
  notification-service:
    build: .
    container_name: notification-service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - DEBUG=true
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - AUTHORIZED_USERS=${AUTHORIZED_USERS}
      - WEBHOOK_MODE=false
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: notification-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build: .
    container_name: notification-celery
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DEBUG=true
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    networks:
      - trading-network

  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    container_name: notification-beat
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DEBUG=true
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    networks:
      - trading-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: notification-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - notification-service
    networks:
      - trading-network

volumes:
  redis_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    external: false
